// server.js ‚Äî –±–æ—Ç (webhook) + API –º–∏–Ω–∏-–∞–ø–ø–∞ + —Å—Ç–∞—Ç–∏–∫–∞ –±–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
require('dotenv').config();
const path = require('path');
const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');

const app = express();
app.set('trust proxy', 1);

// ===== ENV =====
const {
  BOT_TOKEN,
  BASE_URL,                         // –Ω–∞–ø—Ä. https://efes-app.onrender.com
  WEBAPP_URL = '',                  // URL —Ñ—Ä–æ–Ω—Ç–∞ (–µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç –∑–¥–µ—Å—å –∂–µ ‚Äî —Å—Ç–∞–≤—å –∫–∞–∫ BASE_URL)
  ALLOWED_ORIGINS = ''              // –¥–æ–º–µ–Ω—ã —Ñ—Ä–æ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
} = process.env;

if (!BOT_TOKEN) throw new Error('BOT_TOKEN is required');
if (!BASE_URL)  console.warn('‚ö†Ô∏è BASE_URL is not set ‚Äî setWebhook may fail');

// ===== Middleware =====
const allowed = ALLOWED_ORIGINS.split(',').map(s => s.trim()).filter(Boolean);
app.use(cors({
  origin(origin, cb) {
    // –í–µ–±–≤—å—é –¢–µ–ª–µ–≥–∏ –º–æ–∂–µ—Ç –Ω–µ —Å–ª–∞—Ç—å Origin ‚Üí —Ä–∞–∑—Ä–µ—à–∞–µ–º
    if (!origin) return cb(null, true);
    if (allowed.length === 0 || allowed.includes(origin)) return cb(null, true);
    return cb(new Error('CORS blocked for origin: ' + origin));
  },
  credentials: true,
  methods: ['GET','POST','OPTIONS'],
  allowedHeaders: ['Content-Type','X-Telegram-Init-Data']
}));
app.use(express.json({ limit: '1mb' }));

// –†–∞–∑–¥–∞—ë–º —Å—Ç–∞—Ç–∏–∫—É –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (index.html –æ—Ç–¥–∞–¥–∏–º –ë–ï–ó 301/302)
app.use(express.static(path.join(__dirname), { index: 'index.html' }));

// ===== Health & debug =====
app.get('/healthz', (_req, res) => res.json({ ok: true, time: new Date().toISOString() }));
app.get('/', (_req, res) => res.send('OK'));
app.post('/client-log', (req, res) => { console.log('[client-log]', req.body); res.json({ ok:true }); });
app.post('/debug-log',  (req, res) => { console.log('üì≤ FRONT DEBUG:', JSON.stringify(req.body)); res.json({ ok:true }); });

// ===== In-memory "–ë–î" –¥–ª—è MVP =====
const users  = new Map(); // id -> { id, username, contact, points }
const shakes = new Map(); // "minId-maxId" -> { date: 'YYYY-MM-DD' }
const queue  = [];        // –æ–∂–∏–¥–∞–Ω–∏–µ –ø–∞—Ä—ã –Ω–∞ 10 —Å–µ–∫: { id, username, contact, t }

const pairKey = (a,b)=> [Math.min(+a,+b), Math.max(+a,+b)].join('-');
const today   = () => new Date().toISOString().slice(0,10);

// ===== API: /shake =====
// –¢–µ–ª–æ: { telegramId, name, contact }
app.post('/shake', (req, res) => {
  try {
    const { telegramId, name, contact } = req.body || {};
    const id = Number(telegramId);
    if (!id) return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–µ—Ç telegramId' });

    const username = (name || '').startsWith('@') ? name.slice(1) : (name || '');
    const u = users.get(id) || { id, username:'', contact:'', points:0 };
    if (username) u.username = username;
    if (contact)  u.contact  = contact;
    users.set(id, u);

    // –û–∫–Ω–æ –º–∞—Ç—á–º–µ–π–∫–∏–Ω–≥–∞ 10 —Å–µ–∫
    const now = Date.now();
    const cutoff = now - 10_000;
    while (queue.length && queue[0].t < cutoff) queue.shift();

    // –ò—â–µ–º –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –Ω–µ —Ä–∞–≤–Ω–æ–≥–æ –Ω–∞–º
    const idx = queue.findIndex(w => w.id !== id);
    if (idx === -1) {
      queue.push({ id, username: u.username, contact: u.contact, t: now });
      return res.json({ message: '–û–∂–∏–¥–∞–µ–º –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞‚Ä¶', bonus: 0, waiting: true, points: u.points });
    }

    // –ü–∞—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞
    const p = queue.splice(idx,1)[0];

    // –û–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
    const key = pairKey(id, p.id);
    if (shakes.get(key)?.date === today()) {
      return res.status(409).json({ message: '–°–µ–≥–æ–¥–Ω—è —É–∂–µ —á–æ–∫–∞–ª–∏—Å—å —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', bonus: 0 });
    }

    shakes.set(key, { date: today() });

    // –ë–∞–ª–ª—ã –æ–±–æ–∏–º
    u.points = (u.points || 0) + 1;
    users.set(id, u);
    const v = users.get(p.id) || { id: p.id, username: p.username, contact: p.contact, points:0 };
    v.points = (v.points || 0) + 1;
    users.set(p.id, v);

    // –û—Ç–≤–µ—Ç —Ñ—Ä–æ–Ω—Ç—É
    res.json({
      message: 'üéâ –ß–æ–∫ –∑–∞—Å—á–∏—Ç–∞–Ω!',
      bonus: 1,
      points: u.points,
      youGot: v.username ? '@' + v.username : `id:${v.id}`
    });
  } catch (e) {
    console.error('/shake error:', e);
    res.status(500).json({ message: 'Server error' });
  }
});

// ===== Telegram Bot (webhook, –±–µ–∑ polling) =====
const bot = new TelegramBot(BOT_TOKEN, { polling: false });

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –Ω–∞ –Ω–∞—à express-—ç–Ω–¥–ø–æ–∏–Ω—Ç
bot.setWebHook(`${BASE_URL}/bot${BOT_TOKEN}`, { drop_pending_updates: true })
  .then(() => console.log('‚úÖ Webhook set:', `${BASE_URL}/bot${BOT_TOKEN}`))
  .catch(err => console.error('‚ùå setWebHook error:', err.message));

// Express-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û processUpdate)
app.post(`/bot${BOT_TOKEN}`, (req, res) => {
  try {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (e) {
    console.error('processUpdate error:', e);
    res.sendStatus(500);
  }
});

// –ö–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é —á–∞—Ç–∞ (–≤–Ω–∏–∑—É —Å–ª–µ–≤–∞) ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–π web_app-–≤—Ö–æ–¥
const openUrl = WEBAPP_URL || BASE_URL; // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —ç—Ç–æ—Ç –∂–µ —Å–µ—Ä–≤–µ—Ä
if (openUrl) {
  bot.setChatMenuButton({
    menu_button: { type: 'web_app', text: 'Efes Card', web_app: { url: openUrl } }
  }).then(()=> console.log('‚úÖ Chat menu web_app:', openUrl))
    .catch(err => console.error('setChatMenuButton error:', err.message));
}

// /start ‚Üí INLINE web_app-–∫–Ω–æ–ø–∫–∞ (–Ω–∞–¥—ë–∂–Ω–µ–µ, —á–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
bot.onText(/^\/start(?:\s+.*)?$/i, async (msg) => {
  const chatId = msg.chat.id;
  const name = [msg.from.first_name, msg.from.last_name].filter(Boolean).join(' ')
              || (msg.from.username ? '@'+msg.from.username : '–¥—Ä—É–≥');

  const kb = {
    reply_markup: {
      inline_keyboard: [[
        { text: '–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø üç∫', web_app: { url: openUrl } }
      ]]
    }
  };

  try {
    await bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${name}! –ñ–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø.`, kb);
  } catch (e) {
    console.error('/start sendMessage error:', e.message);
  }
});

// –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–∏–Ω–∏-–∞–ø–ø–∞ (–µ—Å–ª–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å tg.sendData({...}))
bot.on('web_app_data', async (msg) => {
  const userId = msg.from.id;
  const username = msg.from.username || msg.from.first_name || `user_${userId}`;
  try {
    const payload = JSON.parse(msg.web_app_data?.data || '{}');
    if (!payload.contact) return bot.sendMessage(userId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç.');

    const entry = users.get(userId) || { id: userId, username, contact: null, points: 0 };
    entry.username = entry.username || username;
    entry.contact  = payload.contact;
    users.set(userId, entry);

    await bot.sendMessage(userId, '‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –í—Å—Ç—Ä—è—Ö–Ω–∏ —Ç–µ–ª–µ—Ñ–æ–Ω, —á—Ç–æ–±—ã ¬´—á–æ–∫–Ω—É—Ç—å—Å—è¬ª üçª');
  } catch (e) {
    console.error('web_app_data parse error:', e.message);
    await bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –º–∏–Ω–∏-–∞–ø–ø–∞.');
  }
});

// ===== Start server =====
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üü¢ Server listening on http://localhost:${PORT}`);
  console.log(`   Webhook: ${BASE_URL ? `${BASE_URL}/bot${BOT_TOKEN}` : 'BASE_URL not set'}`);
});
