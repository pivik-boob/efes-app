// server.js ‚Äî –µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ (–∏ –±–æ—Ç, –∏ API –º–∏–Ω–∏-–∞–ø–ø–∞)
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');

const app = express();
const PORT = process.env.PORT || 3000;

// ==== ENV ====
const BOT_TOKEN  = process.env.BOT_TOKEN;
const BASE_URL   = process.env.BASE_URL;   // https://<your-render>.onrender.com
const WEBAPP_URL = process.env.WEBAPP_URL; // https://<your-vercel>.vercel.app

if (!BOT_TOKEN)  throw new Error('BOT_TOKEN is required');
if (!BASE_URL)   console.warn('‚ö†Ô∏è BASE_URL is not set ‚Äî setWebhook may fail');
if (!WEBAPP_URL) console.warn('‚ö†Ô∏è WEBAPP_URL is not set ‚Äî open-app button will be hidden');

// ==== Middlewares ====
app.use(cors({ origin: true }));
app.use(express.json());

// ==== Telegram Bot (webhook, no polling) ====
const bot = new TelegramBot(BOT_TOKEN);

// –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π URL –≤–∏–¥–∞ /bot<TOKEN>
bot.setWebHook(`${BASE_URL}/bot${BOT_TOKEN}`)
  .then(() => console.log('‚úÖ Webhook set OK'))
  .catch(err => console.error('‚ùå setWebHook error:', err));

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –º–µ–Ω—é –±–æ—Ç–∞ (–≤–∏–¥–Ω–∞ –¥–∞–∂–µ –±–µ–∑ /start)
if (WEBAPP_URL) {
  bot.setChatMenuButton({
    menu_button: {
      type: 'web_app',
      text: '–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø üç∫',
      web_app: { url: WEBAPP_URL }
    }
  }).catch(err => console.error('setChatMenuButton error:', err));
}

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤–µ–±—Ö—É–∫–∞: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ bot.processUpdate(...)
app.post(`/bot${BOT_TOKEN}`, (req, res) => {
  try {
    bot.processUpdate(req.body);
    res.sendStatus(200);
  } catch (e) {
    console.error('processUpdate error:', e);
    res.sendStatus(500);
  }
});

// ==== –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ health-—Ä–æ—É—Ç—ã ====
app.get('/', (_req, res) => res.send('OK'));
app.get('/healthz', (_req, res) => res.json({ ok: true }));

// ==== –ü–ê–ú–Ø–¢–¨ (in-memory) ====
const users  = new Map(); // telegramId -> { name, contact, points }
const shakes = new Map(); // "id1-id2" -> "YYYY-MM-DD"

const pairKey = (a, b) => [Math.min(+a, +b), Math.max(+a, +b)].join('-');
const todayStr = () => new Date().toISOString().slice(0, 10);
const alreadyShakenToday = (id1, id2) => shakes.get(pairKey(id1, id2)) === todayStr();

// ==== /shake ‚Äî API –¥–ª—è –º–∏–Ω–∏-–∞–ø–ø–∞ ====
app.post('/shake', (req, res) => {
  try {
    const { telegramId, name, contact } = req.body || {};
    if (!telegramId || !name || !contact) {
      return res.status(400).json({ message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    if (!users.has(telegramId)) {
      users.set(telegramId, { name, contact, points: 0 });
    }

    // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —Å –∫–µ–º –µ—â—ë –Ω–µ "—á–æ–∫–∞–ª–∏—Å—å" —Å–µ–≥–æ–¥–Ω—è
    let matched = null;
    for (const [id, u] of users.entries()) {
      if (id !== telegramId && !alreadyShakenToday(telegramId, id)) {
        matched = { id, ...u };
        break;
      }
    }

    if (!matched) {
      return res.json({
        message: '–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ —É–∂–µ —á–æ–∫–Ω—É–ª–∏—Å—å —Å–µ–≥–æ–¥–Ω—è',
        bonus: 0
      });
    }

    // –§–∏–∫—Å–∏—Ä—É–µ–º –¥–∞—Ç—É "—á–æ–∫–∞"
    shakes.set(pairKey(telegramId, matched.id), todayStr());

    // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã
    users.get(telegramId).points += 1;
    users.get(matched.id).points += 1;

    return res.json({
      message: 'üéâ –ß–æ–∫ –∑–∞—Å—á–∏—Ç–∞–Ω!',
      bonus: 1,
      youGot: matched.name
    });
  } catch (e) {
    console.error('/shake error:', e);
    res.status(500).json({ message: 'Server error' });
  }
});

// ==== –ë–æ—Ç: /start (–Ω–∞–¥—ë–∂–Ω—ã–π —Ä–µ–≥–µ–∫—Å + web_app-–∫–Ω–æ–ø–∫–∞) ====
bot.onText(/^\/start(?:\s+.*)?$/i, async (msg) => {
  const chatId = msg.chat.id;
  try {
    if (WEBAPP_URL) {
      await bot.sendMessage(chatId, '–û—Ç–∫—Ä–æ–π –º–∏–Ω–∏-–∞–ø–ø:', {
        reply_markup: {
          keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–∞–ø–ø üç∫', web_app: { url: WEBAPP_URL } }]],
          resize_keyboard: true,
          one_time_keyboard: false
        }
      });
    } else {
      await bot.sendMessage(chatId, '–ú–∏–Ω–∏-–∞–ø–ø –≥–æ—Ç–æ–≤. –î–æ–±–∞–≤—å WEBAPP_URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞.');
    }
  } catch (e) {
    console.error('sendMessage /start error:', e);
  }
});

// ==== –ë–æ—Ç: –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp ====
bot.on('web_app_data', async (msg) => {
  const userId   = msg.from.id;
  const username = msg.from.username || msg.from.first_name || `user_${userId}`;
  try {
    const payload = JSON.parse(msg.web_app_data?.data || '{}');

    if (!payload.contact) {
      return bot.sendMessage(userId, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');
    }

    const entry = users.get(userId) || { name: username, contact: null, points: 0 };
    entry.name    = entry.name || username;
    entry.contact = payload.contact;
    users.set(userId, entry);

    await bot.sendMessage(userId, '‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—Å—Ç—Ä—è—Ö–Ω–∏, —á—Ç–æ–±—ã —á–æ–∫–Ω—É—Ç—å—Å—è üçª');
  } catch (e) {
    console.error('web_app_data parse error:', e);
    await bot.sendMessage(userId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–∏–Ω–∏-–∞–ø–ø–∞.');
  }
});

// ==== Start server ====
app.listen(PORT, () => {
  console.log(`üü¢ Server listening on http://localhost:${PORT}`);
  console.log(`   Webhook: ${BASE_URL ? `${BASE_URL}/bot${BOT_TOKEN}` : 'BASE_URL not set'}`);
});